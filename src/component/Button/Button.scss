/*
 * All Rights Reserved
 * Copyright (c) 2021 Yegun Kim
 * Created by Yegun Kim (wlfka102@gmail.com)
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

////
/// `Button` 컴포넌트 스타일 모듈입니다.
/// @author Yegun Kim
////
@use "sass:string" as string;
@use "~/src/style" as style;

/* 1. variable */

/* 1.1. layout */
$padding-x-base: 0.95rem !default;
$padding-x-small: 0.75rem !default;
$padding-x-large: 1.25rem !default;

$padding-y-base: 0.25rem !default;
$padding-y-small: 0.21875rem !default;
$padding-y-large: 0.3125rem !default;

$border-width-base: style.$variable-border-width-base !default;
$border-style-base: style.$variable-border-style-base !default;
$border-color-base: style.$variable-border-color-base !default;

$border-radius-base: style.$variable-border-radius-base !default;
$border-radius-small: style.$variable-border-radius-small !default;
$border-radius-large: style.$variable-border-radius-large !default;

$background-color-base: style.$variable-color-white;

/* 1.2. text */
$font-family: null !default;
$text-color-base: style.$variable-text-color-base;

$font-size-base: style.$variable-font-size-base !default;
$font-size-small: style.$variable-font-size-small !default;
$font-size-large: style.$variable-font-size-large !default;

$font-weight: style.$variable-font-weight-normal !default;
$line-height-base: style.$variable-line-height-base !default;

// $white-space:                null !default; // Set to `nowrap` to prevent text wrapping

// $box-shadow:                 inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075) !default;
// $focus-width:                $input-btn-focus-width !default;
// $focus-box-shadow:           $input-btn-focus-box-shadow !default;
// $disabled-opacity:           .65 !default;
// $active-box-shadow:          inset 0 3px 5px rgba($black, .125) !default;

// $link-color:                 $link-color !default;
// $link-hover-color:           $link-hover-color !default;
// $link-disabled-color:        $gray-600 !default;

// $transition:                 color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;

// $hover-bg-shade-amount:      15% !default;
// $hover-bg-tint-amount:       15% !default;
// $hover-border-shade-amount:  20% !default;
// $hover-border-tint-amount:   10% !default;
// $active-bg-shade-amount:     20% !default;
// $active-bg-tint-amount:      20% !default;
// $active-border-shade-amount: 25% !default;
// $active-border-tint-amount:  10% !default;

/* 2. mixin */
@mixin size($padding-x, $padding-y, $font-size, $border-radius) {
  padding: $padding-y $padding-x;
  @include style.vendor-font-size($font-size);
  @include style.mixin-border-radius($border-radius, 0);
}

@mixin color($text-color, $background-color) {
  color: $text-color;
  background-color: $background-color;
}

@mixin border($border-width, $border-style, $border-color) {
  border-width: $border-width;
  border-style: $border-style;
  border-color: $border-color;
}

@mixin calc-circle-min-width($font-size) {
  // button 버튼 높이만큼 최소한 너비를 확보해야 텍스트가 찌그러지지 않도록 할 수 있다.
  // height = [(폰트 크기 * padding 비율) * 2] + (border 크기 * 2) + (폰트 크기 * 줄 높이 비율)
  $font-size: style.function-strip-unit(style.function-number(style.vendor-rfs-fluid-value($font-size)));

  $padding-y : $font-size * style.function-strip-unit($padding-y-base);
  $border-width : style.function-strip-unit(style.vendor-rem($border-width-base));
  $line-height: $font-size * style.function-strip-unit($line-height-base);
  $min-width : (($padding-y + $border-width) * 2 + $line-height) * 1rem;

  min-width: $min-width;
}

/* 3. selector */
$prefix-base: #{style.$variable-prefix-root}-button;
.#{$prefix-base} {
  // SASS 의 interpolation 기능을 활용해서 base 클래스에 접근할 수 있는 변수를 만든다.
  // base 클래스의 하위 클래스는 변수로 base 클래스를 확장할 수 있다.
  // https://sass-lang.com/documentation/interpolation
  $class-base: &;

  position: relative;
  display: inline-block;
  vertical-align: middle;

  // button 의 높이는 다음 공식으로 산출되며, font-size 는 Bootstrap 의 rfs 라이브러리로 계산한다.
  // height = [(폰트 크기 * padding 비율) * 2] + (border 크기 * 2) + (폰트 크기 * 줄 높이 비율)

  outline: 0rem;

  text-align: center;
  font-family: $font-family;
  font-weight: $font-weight;
  line-height: $line-height-base;
  white-space: nowrap;
  text-decoration: none;

  transition: all 0.3s style.function-get-timing-function(ease-in-out);

  cursor: pointer;
  user-select: none;
  overflow: hidden;

  @include size(
    $padding-x-base,
    $padding-y-base,
    $font-size-base,
    $border-radius-base
  );
  @include border($border-width-base, $border-style-base, $border-color-base);
  @include color($text-color-base, $background-color-base);

  &:hover {
    @include border($border-width-base, $border-style-base, #40a9ff);
    @include color(#40a9ff, $background-color-base);
  }
  /* size */
  &__small {
    @include size(
      $padding-x-small,
      $padding-y-small,
      $font-size-small,
      $border-radius-small
    );
  }

  &__large {
    @include size(
      $padding-x-large,
      $padding-y-large,
      $font-size-large,
      $border-radius-large
    );
  }

  &__circle {

    padding-left: 0px;
    padding-right: 0px;
    text-align: center;
    border-radius: 50%;

    @include calc-circle-min-width($font-size-base);

    &#{$class-base}__small {
      @include calc-circle-min-width($font-size-small);
    }

    &#{$class-base}__large {
      @include calc-circle-min-width($font-size-large);
    }
  }

  &--ripple {
    position: absolute;
    display: block;

    width: 1rem;
    height: 1rem;
    border-radius: 100%;

    background: hsla(0, 100%, 0%, 0.1);
    opacity: 1;

    animation: 1s ease rippling;

    @keyframes rippling {
      to {
        transform: scale(50);
        opacity: 0;
      }
    }

  }
}

:export {
  base: #{$prefix-base};
  // ripple
  ripple: #{$prefix-base}--ripple;
  // size
  small: #{$prefix-base}__small;
  large: #{$prefix-base}__large;
  // shape
  circle: #{$prefix-base}__circle;
}
