// Reference https://www.typescriptlang.org/tsconfig
{
    "compilerOptions": {
      /* Project Options */
      "allowJs": true,          // JS 파일을 프로젝트 내부에서 사용할 수 있도록 한다. (JS 파일은 최대한 제거하자.)
      "target": "ESNext",       // ESNext 로 설정해서 TS 가 지원하는 최신 ES 버전의 JS 로 컴파일되도록 한다.
      "module": "ESNext",       // 프로젝트가 사용할 모듈 시스템을 선택한다. 최신 ES 버전의 모듈 시스템을 사용한다.
      "outDir": "dist",         // TS 가 컴파일한 결과가 저장될 경로다.
      "sourceMap": true,        // TS 소스코드를 디버깅할 수 있도록 sourcemap 파일을 만든다.
      "isolatedModules": true,  // 모듈이 아닌 파일이 있으면 컴파일되지 않는다. 그리고 'Babel' 같은 transpilers 에서 코드를 해석하기 어려우면 경고한다.
      "jsx": "react",           // JSX 코드를 JS 로 변환하는 방법을 정한다. 'react' 면 'React.createElement' 로 변경한다.

      /* Strict checks */
      "alwaysStrict": true,
      "noImplicitAny": true,
      "noImplicitThis": true,
      "strict": true,
      "strictBindCallApply": true,
      "strictFunctionTypes": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,

      /* Module Resolution */
      "baseUrl": ".",                          // 상대 경로의 base 폴더를 정한다. '.' 는 tsconfig.json 가 있는 폴더다.
      "paths": {                                // 상대 경로 중 축약 표현할 경로 리스트다.
        "src/*": ["src/*"],
      },
      "moduleResolution": "Node",               // 'Classic' 는 Backward Compatibility
      "esModuleInterop": true,                  // ES6 Module 과 CommonJS 모듈 차이로 발생하는 문제를 해결한다.
      "forceConsistentCasingInFileNames": true, // Case Sensitivity 차이로 발생하는 문제를 해결한다.

      /* Linter Checks */
      "noFallthroughCasesInSwitch": true,       // switch 문에서 실수로 다른 케이스로 떨어지는 걸 방지한다.
      
    },

    "include": ["src"],
    "exclude": ["node_modules", ".vscode"],
  }